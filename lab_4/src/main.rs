// Вычислите модуль вектора просуммировав квадраты его координат
// и вычислив кввдратный корень полученного значения. Используйте метод `sqrt()` для вычисления
// корня, следующим образом: v.sqrt().


fn magnitude(v:&[f64]) -> f64 {
    (v[0]*v[0]+v[1]*v[1]+v[2]*v[2]).sqrt()
}

// Нормализуйте вектор вычислив его модуль и разделив все его координаты на 
// этот модудль.


fn normalize(v: &mut [f64]) -> &[f64] {
    v[0] = v[0] / magnitude(v); //(v[0]*v[0]+v[1]*v[1]+v[2]*v[2]).sqrt();
    v[1] = v[1] / magnitude(v); // (v[0]*v[0]+v[1]*v[1]+v[2]*v[2]).sqrt();
    v[2] = v[2] / magnitude(v); // (v[0]*v[0]+v[1]*v[1]+v[2]*v[2]).sqrt();
    v
}

// Используйте эту функцию main для проверки своей работы.

fn main() {
    println!("Модуль единичного вектора: {}", magnitude(&[0.0, 1.0, 0.0]));

    let mut v = [1.0, 2.0, 9.0];
    println!("Модуль {v:?}: {}", magnitude(&v));
    normalize(&mut v);
    println!("Модуль {v:?} после нормализации: {}", magnitude(&v));
}